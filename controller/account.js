import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { Op } from 'sequelize';
import { SECRET_KEY, REFRESH_SECRET_KEY } from '../env.js'; // Import SECRET_KEY and REFRESH_SECRET_KEY from your environment
import Account from '../models/accounts.js';


const generateAccessToken = (userId, role) => {
  return jwt.sign({ userId, role }, SECRET_KEY, { expiresIn: '24h' });
};

const generateRefreshToken = (userId) => {
  return jwt.sign({ userId }, REFRESH_SECRET_KEY, { expiresIn: '7d' });
};

  const signupUser = async (req, res) => {
    console.log(req)
    try {
      const { username, email, password, role } = req.body;

      // Hash the password before storing it
      const hashedPassword = await bcrypt.hash(password, 10);

      // Create the user in the database without specifying userId
      const user = await Account.create({
        username,
        email,
        password: hashedPassword,
        role,
      });

      // Generate a token
      const token = jwt.sign({ role, userId: user.id }, SECRET_KEY, { expiresIn: '24h' });
      console.log(token)

      // Generate a refresh token
      const refreshToken = generateRefreshToken(user.id);

      // Store the refresh token in your preferred way (e.g., database or in-memory cache)

      res.status(201).json({ message: 'User created successfully', token, refreshToken });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error });
    }
  };

const loginUser = async (req, res) => {
  try {
    const { username, password, role } = req.body;

    const user = await Account.findOne({
      where: { username },
      attributes: ['username', 'password', 'role'],
    });

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      return res.status(401).json({ message: 'Password incorrect' });
    }

    if (user.role !== role) {
      return res.status(403).json({ message: 'Role does not match' });
    }

    const userId = user.id; // Assuming 'id' is auto-generated by the database.

    // Now, you can use the user's role for further logic if needed.

    // Generate a new access token using generateAccessToken with userId and user.role
    const accessToken = generateAccessToken(userId, user.role);

    res.status(200).json({ message: 'Login successful', accessToken });
  } catch (error) {
    console.error(error);
    res.status(500).json(error);
  }
};







export { loginUser, signupUser };
